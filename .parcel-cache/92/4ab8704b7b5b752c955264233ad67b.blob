var helpers = require("../node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
helpers.prelude(module);
try {
  var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
  _parcelHelpers.defineInteropFlag(exports);
  var _react = require('react');
  var _reactDefault = _parcelHelpers.interopDefault(_react);
  var _styledComponents = require('styled-components');
  var _styledComponentsDefault = _parcelHelpers.interopDefault(_styledComponents);
  var _Header = require('./Header');
  var _HeaderDefault = _parcelHelpers.interopDefault(_Header);
  var _Column = require('./Column');
  var _ColumnDefault = _parcelHelpers.interopDefault(_Column);
  var _DeleteDialog = require('./DeleteDialog');
  var _DeleteDialogDefault = _parcelHelpers.interopDefault(_DeleteDialog);
  var _Overlay2 = require('./Overlay');
  var _Overlay2Default = _parcelHelpers.interopDefault(_Overlay2);
  var _util = require('./util');
  var _api = require('./api');
  var _immer = require('immer');
  var _immerDefault = _parcelHelpers.interopDefault(_immer);
  var _jsxFileName = "/Users/ookawatatsuya/Desktop/react-redux/src/App.tsx", _s = $RefreshSig$();
  const App = () => {
    _s();
    const [filterValue, setFilterValue] = _react.useState('');
    const [{columns, cardsOrder}, setData] = _react.useState({
      cardsOrder: {}
    });
    _react.useEffect(() => {
      ;
      (async () => {
        const columns = await _api.api('GET /v1/columns', null);
        setData(_immerDefault.default(draft => {
          draft.columns = columns;
        }));
        const [unorderedCards, cardsOrder] = await Promise.all([_api.api('GET /v1/cards', null), _api.api('GET /v1/cardsOrder', null)]);
        setData(_immerDefault.default(draft => {
          draft.cardsOrder = cardsOrder;
          draft.columns?.forEach?.(column => {
            column.cards = _util.sortBy(unorderedCards, cardsOrder, column.id);
          });
        }));
      })();
    }, []);
    const [draggingCardID, setDraggingCardID] = _react.useState(undefined);
    const dropCardTo = toID => {
      const fromID = draggingCardID;
      if (!fromID) return;
      setDraggingCardID(undefined);
      if (fromID === toID) return;
      const patch = _util.reorderPatch(cardsOrder, fromID, toID);
      setData(_immerDefault.default(draft => {
        draft.cardsOrder = {
          ...draft.cardsOrder,
          ...patch
        };
        const unorderedCards = draft.columns?.flatMap?.(c => c.cards ?? []) ?? [];
        draft.columns?.forEach?.(column => {
          column.cards = _util.sortBy(unorderedCards, draft.cardsOrder, column.id);
        });
      }));
      _api.api('PATCH /v1/cardsOrder', patch);
    };
    const setText = (columnID, value) => {
      setData(_immerDefault.default(draft => {
        const column = draft.columns?.find?.(c => c.id === columnID);
        if (!column) return;
        column.text = value;
      }));
    };
    const addCard = columnID => {
      const column = columns?.find?.(c => c.id === columnID);
      if (!column) return;
      const text = column.text;
      const cardID = _util.randomID();
      const patch = _util.reorderPatch(cardsOrder, cardID, cardsOrder[columnID]);
      setData(_immerDefault.default(draft => {
        const column = draft.columns?.find?.(c => c.id === columnID);
        if (!column?.cards) return;
        column.cards.unshift({
          id: cardID,
          text: column.text
        });
        column.text = '';
        draft.cardsOrder = {
          ...draft.cardsOrder,
          ...patch
        };
      }));
      _api.api('POST /v1/cards', {
        id: cardID,
        text
      });
      _api.api('PATCH /v1/cardsOrder', patch);
    };
    const [deletingCardID, setDeletingCardID] = _react.useState(undefined);
    const deleteCard = () => {
      const cardID = deletingCardID;
      if (!cardID) return;
      setDeletingCardID(undefined);
      const patch = _util.reorderPatch(cardsOrder, cardID);
      setData(_immerDefault.default(draft => {
        const column = draft.columns?.find?.(col => col.cards?.some?.(c => c.id === cardID));
        if (!column?.cards) return;
        column.cards = column.cards.filter(c => c.id !== cardID);
        draft.cardsOrder = {
          ...draft.cardsOrder,
          ...patch
        };
      }));
      _api.api('DELETE /v1/cards', {
        id: cardID
      });
      _api.api('PATCH /v1/cardsOrder', patch);
    };
    return (
      /*#__PURE__*/_reactDefault.default.createElement(Container, {
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 165,
          columnNumber: 5
        }
      }, /*#__PURE__*/_reactDefault.default.createElement(_HeaderDefault.default, {
        filterValue: filterValue,
        onFilterChange: setFilterValue,
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 166,
          columnNumber: 7
        }
      }), /*#__PURE__*/_reactDefault.default.createElement(MainArea, {
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 168,
          columnNumber: 7
        }
      }, /*#__PURE__*/_reactDefault.default.createElement(HorizontalScroll, {
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 169,
          columnNumber: 9
        }
      }, !columns ? /*#__PURE__*/_reactDefault.default.createElement(Loading, {
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 171,
          columnNumber: 13
        }
      }) : columns.map(({id: columnID, title, cards, text}) => /*#__PURE__*/_reactDefault.default.createElement(_ColumnDefault.default, {
        key: columnID,
        title: title,
        filterValue: filterValue,
        cards: cards,
        text: text,
        onTextChange: value => setText(columnID, value),
        onTextConfirm: () => addCard(columnID),
        onCardDragStart: cardID => setDraggingCardID(cardID),
        onCardDrop: entered => dropCardTo(entered ?? columnID),
        onCardDeleteClick: cardID => setDeletingCardID(cardID),
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 174,
          columnNumber: 15
        }
      })))), deletingCardID && /*#__PURE__*/_reactDefault.default.createElement(Overlay, {
        onClick: () => setDeletingCardID(undefined),
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 192,
          columnNumber: 9
        }
      }, /*#__PURE__*/_reactDefault.default.createElement(_DeleteDialogDefault.default, {
        onConfirm: deleteCard,
        onCancel: () => setDeletingCardID(undefined),
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 193,
          columnNumber: 11
        }
      })))
    );
  };
  _s(App, "V9RisW2qTnMTaVXsSQu1BS3WoW4=");
  _c = App;
  const Loading = _styledComponentsDefault.default.div.attrs({
    children: 'Loading...'
  })`
  font-size: 14px;
`;
  _c2 = Loading;
  const Container = _styledComponentsDefault.default.div`
  display: flex;
  flex-flow: column;
  height: 100%;
`;
  _c3 = Container;
  const MainArea = _styledComponentsDefault.default.div`
  height: 100%;
  padding: 16px 0;
  overflow-y: auto;
`;
  _c4 = MainArea;
  const HorizontalScroll = _styledComponentsDefault.default.div`
  display: flex;
  width: 100%;
  height: 100%;
  overflow-x: auto;

  > * {
    margin-left: 16px;
    flex-shrink: 0;
  }

  ::after {
    display: block;
    flex: 0 0 16px;
    content: '';
  }
`;
  _c5 = HorizontalScroll;
  const Overlay = _styledComponentsDefault.default(_Overlay2Default.default)`
  display: flex;
  justify-content: center;
  align-items: center;
`;
  _c6 = Overlay;
  exports.default = App;
  var _c, _c2, _c3, _c4, _c5, _c6;
  $RefreshReg$(_c, "App");
  $RefreshReg$(_c2, "Loading");
  $RefreshReg$(_c3, "Container");
  $RefreshReg$(_c4, "MainArea");
  $RefreshReg$(_c5, "HorizontalScroll");
  $RefreshReg$(_c6, "Overlay");
  helpers.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
