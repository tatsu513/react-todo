var helpers = require("../node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
helpers.prelude(module);
try {
  var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
  _parcelHelpers.defineInteropFlag(exports);
  var _react = require('react');
  var _reactDefault = _parcelHelpers.interopDefault(_react);
  var _styledComponents = require('styled-components');
  var _styledComponentsDefault = _parcelHelpers.interopDefault(_styledComponents);
  var _reactRedux = require('react-redux');
  var _color = require('./color');
  var _Button = require('./Button');
  var _jsxFileName = "/Users/ookawatatsuya/Desktop/react-redux/src/InputForm.tsx", _s = $RefreshSig$();
  const InputForm = ({columnID, onCancel, className}) => {
    _s();
    const dispatch = _reactRedux.useDispatch();
    const value = _reactRedux.useSelector(state => state.columns?.find?.(c => c.id === columnID)?.text);
    const cardsOrder = _reactRedux.useSelector(state => state.cardsOrder);
    const onChange = value => dispatch({
      type: 'InputForm.SetText',
      payload: {
        columnID,
        value
      }
    });
    const disabled = !value?.trim?.();
    const handleConfirm = () => {
      if (disabled) return;
      onConfirm?.();
    };
    const ref = _react.useRef(null);
    _react.useEffect(() => {
      const el = ref.current;
      if (!el) return;
      const {borderTopWidth, borderBottomWidth} = getComputedStyle(el);
      el.style.height = 'auto';
      // 一度 auto にしないと高さが縮まなくなる
      el.style.height = `calc(${borderTopWidth} + ${el.scrollHeight}px + ${borderBottomWidth})`;
    }, // 内容が変わるたびに高さを再計算
    [value]);
    return (
      /*#__PURE__*/_reactDefault.default.createElement(Container, {
        className: className,
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 54,
          columnNumber: 5
        }
      }, /*#__PURE__*/_reactDefault.default.createElement(Input, {
        ref: ref,
        autoFocus: true,
        placeholder: "Enter a note",
        value: value,
        onChange: ev => onChange?.(ev.currentTarget.value),
        onKeyDown: ev => {
          if (!((ev.metaKey || ev.ctrlKey) && ev.key === 'Enter')) return;
          handleConfirm();
        },
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 55,
          columnNumber: 7
        }
      }), /*#__PURE__*/_reactDefault.default.createElement(ButtonRow, {
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 67,
          columnNumber: 7
        }
      }, /*#__PURE__*/_reactDefault.default.createElement(AddButton, {
        disabled: disabled,
        onClick: handleConfirm,
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 68,
          columnNumber: 9
        }
      }), /*#__PURE__*/_reactDefault.default.createElement(CancelButton, {
        onClick: onCancel,
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 69,
          columnNumber: 9
        }
      })))
    );
  };
  _s(InputForm, "EdFPf4vV9E2A5CZbqtl7AR9YCAo=", false, function () {
    return [_reactRedux.useDispatch, _reactRedux.useSelector, _reactRedux.useSelector];
  });
  _c = InputForm;
  const Container = _styledComponentsDefault.default.div``;
  _c2 = Container;
  const Input = _styledComponentsDefault.default.textarea`
  display: block;
  width: 100%;
  margin-bottom: 8px;
  border: solid 1px ${_color.Silver};
  border-radius: 3px;
  padding: 6px 8px;
  background-color: ${_color.White};
  font-size: 14px;
  line-height: 1.7;

  :focus {
    outline: none;
    border-color: ${_color.Blue};
  }
`;
  _c3 = Input;
  const ButtonRow = _styledComponentsDefault.default.div`
  display: flex;

  > :not(:first-child) {
    margin-left: 8px;
  }
`;
  _c4 = ButtonRow;
  const AddButton = _styledComponentsDefault.default(_Button.ConfirmButton).attrs({
    children: 'Add'
  })``;
  _c5 = AddButton;
  const CancelButton = _styledComponentsDefault.default(_Button.Button).attrs({
    children: 'Cancel'
  })``;
  _c6 = CancelButton;
  exports.default = InputForm;
  var _c, _c2, _c3, _c4, _c5, _c6;
  $RefreshReg$(_c, "InputForm");
  $RefreshReg$(_c2, "Container");
  $RefreshReg$(_c3, "Input");
  $RefreshReg$(_c4, "ButtonRow");
  $RefreshReg$(_c5, "AddButton");
  $RefreshReg$(_c6, "CancelButton");
  helpers.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
