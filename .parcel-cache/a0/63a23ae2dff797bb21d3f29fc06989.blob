var helpers = require("../node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
helpers.prelude(module);
try {
  var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
  _parcelHelpers.defineInteropFlag(exports);
  var _react = require('react');
  var _reactDefault = _parcelHelpers.interopDefault(_react);
  var _styledComponents = require('styled-components');
  var _styledComponentsDefault = _parcelHelpers.interopDefault(_styledComponents);
  var _Header = require('./Header');
  var _HeaderDefault = _parcelHelpers.interopDefault(_Header);
  var _Column = require('./Column');
  var _ColumnDefault = _parcelHelpers.interopDefault(_Column);
  var _DeleteDialog = require('./DeleteDialog');
  var _DeleteDialogDefault = _parcelHelpers.interopDefault(_DeleteDialog);
  var _Overlay2 = require('./Overlay');
  var _Overlay2Default = _parcelHelpers.interopDefault(_Overlay2);
  var _util = require('./util');
  var _api = require('./api');
  var _immer = require('immer');
  var _immerDefault = _parcelHelpers.interopDefault(_immer);
  var _jsxFileName = "/Users/ookawatatsuya/Desktop/react-redux/src/App.tsx", _s = $RefreshSig$();
  const App = () => {
    _s();
    const [filterValue, setFilterValue] = _react.useState('');
    const [{columns}, setData] = _react.useState({
      cardsOrder: {}
    });
    _react.useEffect(() => {
      ;
      (async () => {
        const columns = await _api.api('GET /v1/columns', null);
        setColumns(columns);
        const unorderedCards = await _api.api('GET /v1/cards', null);
        setColumns(_immerDefault.default(columns => {
          columns.forEach(column => {
            column.cards = unorderedCards;
          });
        }));
      })();
    }, []);
    const [draggingCardID, setDraggingCardID] = _react.useState(undefined);
    const dropCardTo = toID => {
      const fromID = draggingCardID;
      if (!fromID) return;
      setDraggingCardID(undefined);
      if (fromID === toID) return;
      setColumns(_immerDefault.default(columns => {
        const card = columns.flatMap(col => col.cards ?? []).find(c => c.id === fromID);
        if (!card) return;
        const fromColumn = columns.find(col => col.cards?.some?.(c => c.id === fromID));
        if (!fromColumn?.cards) return;
        fromColumn.cards = fromColumn.cards.filter(c => c.id !== fromID);
        const toColumn = columns.find(col => col.id === toID || col.cards?.some?.(c => c.id === toID));
        if (!toColumn?.cards) return;
        let index = toColumn.cards.findIndex(c => c.id === toID);
        if (index < 0) {
          index = toColumn.cards.length;
        }
        toColumn.cards.splice(index, 0, card);
      }));
    };
    const setText = (columnID, value) => {
      setColumns(_immerDefault.default(columns => {
        const column = columns.find(c => c.id === columnID);
        if (!column) return;
        column.text = value;
      }));
    };
    const addCard = columnID => {
      const column = columns.find(c => c.id === columnID);
      if (!column) return;
      const text = column.text;
      const cardID = _util.randomID();
      setColumns(_immerDefault.default(columns => {
        const column = columns.find(c => c.id === columnID);
        if (!column) return;
        column.cards?.unshift?.({
          id: cardID,
          text: column.text
        });
        column.text = '';
      }));
      _api.api('POST /v1/cards', {
        id: cardID,
        text
      });
    };
    const [deletingCardID, setDeletingCardID] = _react.useState(undefined);
    const deleteCard = () => {
      const cardID = deletingCardID;
      if (!cardID) return;
      setDeletingCardID(undefined);
      setColumns(_immerDefault.default(columns => {
        const column = columns.find(col => col.cards?.some?.(c => c.id === cardID));
        if (!column) return;
        column.cards = column.cards?.filter?.(c => c.id !== cardID);
      }));
    };
    return (
      /*#__PURE__*/_reactDefault.default.createElement(Container, {
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 145,
          columnNumber: 5
        }
      }, /*#__PURE__*/_reactDefault.default.createElement(_HeaderDefault.default, {
        filterValue: filterValue,
        onFilterChange: setFilterValue,
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 146,
          columnNumber: 7
        }
      }), /*#__PURE__*/_reactDefault.default.createElement(MainArea, {
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 148,
          columnNumber: 7
        }
      }, /*#__PURE__*/_reactDefault.default.createElement(HorizontalScroll, {
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 149,
          columnNumber: 9
        }
      }, columns.map(({id: columnID, title, cards, text}) => /*#__PURE__*/_reactDefault.default.createElement(_ColumnDefault.default, {
        key: columnID,
        title: title,
        filterValue: filterValue,
        cards: cards,
        text: text,
        onTextChange: value => setText(columnID, value),
        onTextConfirm: () => addCard(columnID),
        onCardDragStart: cardID => setDraggingCardID(cardID),
        onCardDrop: entered => dropCardTo(entered ?? columnID),
        onCardDeleteClick: cardID => setDeletingCardID(cardID),
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 151,
          columnNumber: 13
        }
      })))), deletingCardID && /*#__PURE__*/_reactDefault.default.createElement(Overlay, {
        onClick: () => setDeletingCardID(undefined),
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 168,
          columnNumber: 9
        }
      }, /*#__PURE__*/_reactDefault.default.createElement(_DeleteDialogDefault.default, {
        onConfirm: deleteCard,
        onCancel: () => setDeletingCardID(undefined),
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 169,
          columnNumber: 11
        }
      })))
    );
  };
  _s(App, "HVkwf+MEdgbERLve9/OGmzezugk=");
  _c = App;
  const Container = _styledComponentsDefault.default.div`
  display: flex;
  flex-flow: column;
  height: 100%;
`;
  _c2 = Container;
  const MainArea = _styledComponentsDefault.default.div`
  height: 100%;
  padding: 16px 0;
  overflow-y: auto;
`;
  _c3 = MainArea;
  const HorizontalScroll = _styledComponentsDefault.default.div`
  display: flex;
  width: 100%;
  height: 100%;
  overflow-x: auto;

  > * {
    margin-left: 16px;
    flex-shrink: 0;
  }

  ::after {
    display: block;
    flex: 0 0 16px;
    content: '';
  }
`;
  _c4 = HorizontalScroll;
  const Overlay = _styledComponentsDefault.default(_Overlay2Default.default)`
  display: flex;
  justify-content: center;
  align-items: center;
`;
  _c5 = Overlay;
  exports.default = App;
  var _c, _c2, _c3, _c4, _c5;
  $RefreshReg$(_c, "App");
  $RefreshReg$(_c2, "Container");
  $RefreshReg$(_c3, "MainArea");
  $RefreshReg$(_c4, "HorizontalScroll");
  $RefreshReg$(_c5, "Overlay");
  helpers.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
