var helpers = require("../node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
helpers.prelude(module);
try {
  var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
  _parcelHelpers.defineInteropFlag(exports);
  var _react = require('react');
  var _reactDefault = _parcelHelpers.interopDefault(_react);
  var _styledComponents = require('styled-components');
  var _styledComponentsDefault = _parcelHelpers.interopDefault(_styledComponents);
  var _Header = require('./Header');
  var _HeaderDefault = _parcelHelpers.interopDefault(_Header);
  var _Column = require('./Column');
  var _ColumnDefault = _parcelHelpers.interopDefault(_Column);
  var _DeleteDialog = require('./DeleteDialog');
  var _DeleteDialogDefault = _parcelHelpers.interopDefault(_DeleteDialog);
  var _Overlay2 = require('./Overlay');
  var _Overlay2Default = _parcelHelpers.interopDefault(_Overlay2);
  var _immer = require('immer');
  var _immerDefault = _parcelHelpers.interopDefault(_immer);
  var _jsxFileName = "/Users/ookawatatsuya/Desktop/react-redux/src/App.tsx", _s = $RefreshSig$();
  const App = () => {
    _s();
    const [filterValue, setFilterValue] = _react.useState('');
    const [columns, setColumns] = _react.useState([{
      id: 'A',
      title: 'TODO',
      cards: [{
        id: 'a',
        text: '朝食をとる🍞'
      }, {
        id: 'b',
        text: 'SNSをチェックする🐦'
      }, {
        id: 'c',
        text: '布団に入る (:3[___]'
      }]
    }, {
      id: 'B',
      title: 'Doing',
      cards: [{
        id: 'd',
        text: '顔を洗う👐'
      }, {
        id: 'e',
        text: '歯を磨く🦷'
      }]
    }, {
      id: 'C',
      title: 'Waiting',
      cards: []
    }, {
      id: 'D',
      title: 'Done',
      cards: [{
        id: 'f',
        text: '布団から出る (:3っ)っ -=三[＿＿]'
      }]
    }]);
    const [draggingCardID, setDraggingCardID] = _react.useState(undefined);
    const dropCardTo = toID => {
      const fromID = draggingCardID;
      if (!fromID) return;
      setDraggingCardID(undefined);
      if (fromID === toID) return;
      setColumns(_immerDefault.default(columns => {
        const card = columns.flatMap(col => col.cards).find(c => c.id === fromID);
        if (!card) return;
        const fromColumn = columns.find(col => col.cards.some(c => c.id === fromID));
        if (!fromColumn) return;
        fromColumn.cards = fromColumn.cards.filter(c => c.id !== fromID);
        const toColumn = columns.find(col => col.id === toID || col.cards.some(c => c.id === toID));
        if (!toColumn) return;
        let index = toColumn.cards.findIndex(c => c.id === toID);
        if (index < 0) {
          index = toColumn.cards.length;
        }
        toColumn.cards.splice(index, 0, card);
      }));
    };
    const [deletingCardID, setDeletingCardID] = _react.useState(undefined);
    return (
      /*#__PURE__*/_reactDefault.default.createElement(Container, {
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 86,
          columnNumber: 5
        }
      }, /*#__PURE__*/_reactDefault.default.createElement(_HeaderDefault.default, {
        filterValue: filterValue,
        onFilterChange: setFilterValue,
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 87,
          columnNumber: 7
        }
      }), /*#__PURE__*/_reactDefault.default.createElement(MainArea, {
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 89,
          columnNumber: 7
        }
      }, /*#__PURE__*/_reactDefault.default.createElement(HorizontalScroll, {
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 90,
          columnNumber: 9
        }
      }, columns.map(({id: columnID, title, cards}) => /*#__PURE__*/_reactDefault.default.createElement(_ColumnDefault.default, {
        key: columnID,
        title: title,
        filterValue: filterValue,
        cards: cards,
        onCardDragStart: cardID => setDraggingCardID(cardID),
        onCardDrop: entered => dropCardTo(entered ?? columnID),
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 92,
          columnNumber: 13
        }
      })))), /*#__PURE__*/_reactDefault.default.createElement(Overlay, {
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 104,
          columnNumber: 7
        }
      }, /*#__PURE__*/_reactDefault.default.createElement(_DeleteDialogDefault.default, {
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 105,
          columnNumber: 9
        }
      })))
    );
  };
  _s(App, "Yk4I844BjKhycX9HEhDNNN66B6o=");
  _c = App;
  const Container = _styledComponentsDefault.default.div`
  display: flex;
  flex-flow: column;
  height: 100%;
`;
  _c2 = Container;
  const MainArea = _styledComponentsDefault.default.div`
  height: 100%;
  padding: 16px 0;
  overflow-y: auto;
`;
  _c3 = MainArea;
  const HorizontalScroll = _styledComponentsDefault.default.div`
  display: flex;
  width: 100%;
  height: 100%;
  overflow-x: auto;

  > * {
    margin-left: 16px;
    flex-shrink: 0;
  }

  ::after {
    display: block;
    flex: 0 0 16px;
    content: '';
  }
`;
  _c4 = HorizontalScroll;
  const Overlay = _styledComponentsDefault.default(_Overlay2Default.default)`
  display: flex;
  justify-content: center;
  align-items: center;
`;
  _c5 = Overlay;
  exports.default = App;
  var _c, _c2, _c3, _c4, _c5;
  $RefreshReg$(_c, "App");
  $RefreshReg$(_c2, "Container");
  $RefreshReg$(_c3, "MainArea");
  $RefreshReg$(_c4, "HorizontalScroll");
  $RefreshReg$(_c5, "Overlay");
  helpers.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
