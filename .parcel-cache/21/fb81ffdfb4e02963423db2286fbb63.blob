var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "reducer", function () {
  return reducer;
});
var _immer = require('immer');
var _immerDefault = _parcelHelpers.interopDefault(_immer);
var _util = require('./util');
const initialState = {
  filterValue: '',
  cardsOrder: {}
};
const reducer = _immerDefault.default((draft, action) => {
  switch (action.type) {
    case 'Filter.SetFilter':
      {
        const {value} = action.payload;
        draft.filterValue = value;
        return;
      }
    case 'App.SetColumns':
      {
        const {columns} = action.payload;
        draft.columns = columns;
        return;
      }
    case 'App.SetCards':
      {
        const {cards: unorderedCards, cardsOrder} = action.payload;
        draft.cardsOrder = cardsOrder;
        draft.columns?.forEach?.(column => {
          column.cards = _util.sortBy(unorderedCards, cardsOrder, column.id);
        });
        return;
      }
    case 'Card.SetDeletingCard':
      {
        const {cardID} = action.payload;
        draft.deletingCardID = cardID;
        return;
      }
    case 'Dialog.ConfirmDelete':
      {
        const cardID = draft.deletingCardID;
        if (!cardID) return;
        draft.deletingCardID = undefined;
        const column = draft.columns?.find?.(col => col.cards?.some?.(c => c.id === cardID));
        if (!column?.cards) return;
        column.cards = column.cards.filter(c => c.id !== cardID);
        const patch = _util.reorderPatch(draft.cardsOrder, cardID);
        draft.cardsOrder = {
          ...draft.cardsOrder,
          ...patch
        };
        return;
      }
    case 'Dialog.CancelDelete':
      {
        draft.deletingCardID = undefined;
        return;
      }
    case 'Card.StartDragging':
      {
        const {cardID} = action.payload;
        draft.draggingCardID = cardID;
        return;
      }
    case 'Card.Drop':
      {
        const fromID = draft.draggingCardID;
        if (!fromID) return;
        draft.draggingCardID = undefined;
        const {toID} = action.payload;
        if (fromID === toID) return;
        const patch = _util.reorderPatch(draft.cardsOrder, fromID, toID);
        draft.cardsOrder = {
          ...draft.cardsOrder,
          ...patch
        };
        const unorderedCards = draft.columns?.flatMap?.(c => c.cards ?? []) ?? [];
        draft.columns?.forEach?.(column => {
          column.cards = _util.sortBy(unorderedCards, draft.cardsOrder, column.id);
        });
        return;
      }
    case 'InputForm.SetText':
      {
        const {columnID, value} = action.payload;
        const column = draft.columns?.find?.(c => c.id === columnID);
        if (!column) return;
        column.text = value;
        return;
      }
    case 'InputForm.ConfirmInput':
      {
        const {columnID, cardID} = action.payload;
        const column = draft.columns?.find?.(c => c.id === columnID);
        if (!column?.cards) return;
        column.cards.unshift({
          id: cardID,
          text: column.text
        });
        column.text = '';
        const patch = _util.reorderPatch(draft.cardsOrder, cardID, draft.cardsOrder[columnID]);
        draft.cardsOrder = {
          ...draft.cardsOrder,
          ...patch
        };
        return;
      }
    default:
      {
        const _ = action;
      }
  }
}, initialState);
